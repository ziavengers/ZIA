STOCK_CALLBACK = (
    'class StockCallback',
    '{',
    'public:',
    'class Herited',
    '{',
    'public:',
    'virtual void operator()() = 0;',
    'virtual ~Herited() { }',
    '};',
    'template < class I >',
    'class Subterfuge : public Herited',
    '{',
    'public:',
    'Subterfuge(I& obj) : _func(obj) { }',
    'void	operator()()',
    '{',
    '_func.operator()();',
    '}',
    'private:',
    'I	_func;',
    '};',
    'template < typename I >',
    'StockCallback(I t)',
    '{',
    '_sub = new Subterfuge< I >(t);',
    '}',
    'StockCallback(const StockCallback& s)',
    '{',
    '_sub = s._sub;',
    '}',
    'StockCallback&	operator=(const StockCallback& s)',
    '{',
    'this->_sub = s._sub;',
    'return *this;',
    '}',
    'void	operator()()',
    '{',
    '_sub->operator()();',
    '}',
    'private:',
    'Herited	*_sub;',
    '};'
    )

def make_stock_callback(n = 0):
    return list(STOCK_CALLBACK)
